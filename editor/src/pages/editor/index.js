import Head from 'next/head';
import App from '../_app';

import { getStrucInfo, Marks } from '../Workspace/StrucDisplay';

import { RadioLabel } from '@/widgets/Selection';
import { Vertical } from '@/widgets/Line';
import { Button, ActionBtn } from '@/widgets/Button';

import { useEffect, useRef, useState } from 'react';
import { invoke } from "@tauri-apps/api/tauri";

import style from "@/styles/StrucEditor.module.css";

const MARKING_LIST = new Set([
    "point",
    "mark",
    "hide"
]);

const VIEW_PADDING = 0.1;
const VIEW_SIZE = 1 + 2 * VIEW_PADDING;

function strucNormalization(struc) {

}

export function SvgEditorArea({ struc, selectTool }) {
    // const [transform, setTransform] = useState({})
    const areaRef = useRef();

    let strucInfo = getStrucInfo(struc);
    let size = strucInfo.size.map(val => val === 0 ? 1 : val);

    function transformPos(pos) {
        return { x: pos.x / size[0], y: pos.y / size[1] };
    }

    function toWorkCoordinates(pos) {
        let rect = areaRef.current.getBoundingClientRect();
        let ratio;
        let offset;
        if (rect.width > rect.height) {
            ratio = VIEW_SIZE / rect.height;
            offset = [(rect.width * ratio - 1) / 2, VIEW_PADDING];
        } else {
            ratio = VIEW_SIZE / rect.width;
            offset = [VIEW_PADDING, (rect.height * ratio - 1) / 2];
        }
        return { x: (pos.x - rect.x) * ratio - offset[0], y: (pos.y - rect.y) * ratio - offset[1] }
    }

    return (
        <svg
            ref={areaRef}
            className={style.editorArea}
            viewBox={`-${VIEW_PADDING} -${VIEW_PADDING} ${VIEW_SIZE} ${VIEW_SIZE}`}
            onClick={e => console.log(toWorkCoordinates({ x: e.clientX, y: e.clientY }))}
        >
            <rect width={1} height={1} x={0} y={0} className={style.pageArea} />
            {strucInfo.paths.map((points, i) => (
                <polyline key={i} className={style.strucLine} points={points.map(pos => `${pos.x} ${pos.y}`).join(',')} />
            ))}
            <g>{
                strucInfo.marks.map((mark, i) => {
                    return <Marks key={i} options={MARKING_LIST} markSize={0.03} className={style.mark} {...mark} />
                })
            }</g>
        </svg>
    )
}

export function Editor() {
    const [name, setName] = useState();
    const [struc, setStruc] = useState();

    const [curTool, setcurTool] = useState("select");
    const [changed, setChanged] = useState(false);

    useEffect(() => {
        invoke("get_struc_editor_data")
            .then(data => {
                setName(data[0]);
                setStruc(data[1]);
            })
    }, []);

    let toolBtns = [
        {
            label: "选择(v)",
            value: "select"
        },
        {
            label: "添加(a)",
            value: "add"
        }
    ];

    return (
        <div className={style.background}>
            <SvgEditorArea struc={struc} />
            <div className={style.toolsArea}>
                <Vertical>
                    <RadioLabel items={toolBtns} currents={curTool} vertical={true} onChange={(e, value) => {
                        if (value !== curTool) {
                            setcurTool(value);
                        }
                    }} />
                    <hr />
                    <ActionBtn active={changed ? "" : undefined}>保存(s)</ActionBtn>
                    <Button>标准(n)</Button>
                    <Button>退出</Button>
                </Vertical>
            </div>
        </div>
    )
}

export default function Index() {
    return (
        <>
            <Head>
                <title>Struc Editor</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <App Component={Editor}></App>
        </>
    )
}